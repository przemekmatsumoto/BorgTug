[global]
slack_webhook_url=your_weebhook_slack_url

[your_name_for_client]
use_docker=true # Only if you are using docker on your client installation! 
ssh_host=your_ssh_host_configured_in_/home/remote-backup/.ssh/config
socket_remote=/path/where/the/remote/sock/will/be/created # WARNING! User borg must have access to the directory where you are creating the .sock!
socket_local=/path/where/the/local/sock/will/be/created # WARNING! Must be the same as in /etc/systemd/system/your_socket_name.socket on the ListenStream=/path/where/the/sock/will/be/created
borg_binary=borg # Path to your borg binary
socat_binary=socat # Path to your socat binary
passcommand=pass show path/to/your/pass/password/for/borgbackup/repo # This is just an example of a password manager that works and is configured on the client
repo=ssh://dummy/data/to/your/new/borgbackup/repository # WARNING! Do not remove ssh://dummy because it is ignored during the backup process because we use socat and not standard ssh. If you had written /path/to/your/borg/repo then /path would be ignored!
dirs=data/your/directories/to/be/backupd/from/the/client /you/can/paste /some/more/after/space # WARNING! if you are using docker container installation on the client, make sure about your mounting point! For example in this installation I was using data/ as mounting point in the container
docker_binary=/usr/local/bin/docker # Path to your docker binary
docker_image=nas # Name of the built docker image
docker_volumes=-v /var/services/homes:/data:ro -v /tmp:/tmp:rw # It is best to mount the parent folder, thanks to which you will be able to freely choose the folders for backup in 'dirs='
docker_user=root # Your user used in the docker container, if you choose a different one you need to change the Dockerfile and make sure that the user has access to the appropriate folders from the host



# EXAMPLES:
# "On host" configuration examples:
#
#    [debian1]
#    ssh_host=debian1
#    socket_remote=/tmp/debian1.sock
#    socket_local=/run/remote-backup/debian1.sock
#    borg_binary=borg
#    socat_binary=socat
#    passcommand=pass show repozytoria/borg/debian1
#    repo=ssh://dummy/mnt/backup/debian1
#    dirs=/root /home/borg
#
#    [nas1]
#    ssh_host=nas1
#    socket_remote=/tmp/nas1.sock
#    socket_local=/run/remote-backup/nas1.sock
#    borg_binary=/opt/bin/borg
#    socat_binary=/opt/bin/socat
#    passcommand=/opt/bin/pass show repositories/borg/nas1
#    repo=ssh://dummy/mnt/backup/nas1
#    dirs=/var/services/homes/borg/t
#
# "In Docker Container" configuration examples:
#
#    [debian1]
#    use_docker=true
#    ssh_host=debian1
#    socket_remote=/tmp/debian1.sock
#    socket_local=/run/remote-backup/debian1.sock
#    borg_binary=borg
#    socat_binary=socat
#    passcommand=pass show repositories/borg/debian
#    repo=ssh://dummy/mnt/backup/debian1
#    dirs=borg/test
#    docker_binary=docker
#    docker_image=debian
#    docker_volumes=-v /home:/data:ro -v /tmp:/tmp:rw
#    docker_user=root
#
#    [nas1]
#    use_docker=true
#    ssh_host=nas1
#    socket_remote=/tmp/nas1.sock
#    socket_local=/run/remote-backup/nas1.sock
#    borg_binary=borg
#    socat_binary=socat
#    passcommand=pass show repositories/borg/nas
#    repo=ssh://dummy/mnt/backup/nas1
#    dirs=/data/borg/t
#    docker_binary=/usr/local/bin/docker
#    docker_image=nas
#    docker_volumes=-v /var/services/homes:/data:ro -v /tmp:/tmp:rw
#    docker_user=root
